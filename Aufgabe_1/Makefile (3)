
# Name of the binary
BINARY1 = matrixmult_par
BINARY2 = matrixmult_ser
# Object files
OBJS1   = matrixmult_par.c
OBJS2   = matrixmult_ser.c
# Compiler flags
CFLAGS = -Werror -Wall
# Linker flags
LFLAGS = -Werror -Wall


# all target: builds all important targets
all: Build1 Build2

Build1:${BINARY1}
# Links the binary
${BINARY1} : ${OBJS1}
	gcc -pthread ${LFLAGS} -o ${BINARY1} ${OBJS1} -lrt
    
Build2: ${BINARY2}  
${BINARY2} : ${OBJS2}
	gcc -pthread ${LFLAGS} -o ${BINARY2} ${OBJS2} -lrt


# Compiles a source-file (any file with file extension .c) into an object-file
#
# "%" is a wildcard which matches every file-name (similar to * in regular expressions)
# Such a rule is called a pattern rule (because it matches a pattern, see https://www.gnu.org/software/make/manual/html_node/Pattern-Rules.html),
# which are a form of so called implicit rules (see https://www.gnu.org/software/make/manual/html_node/Implicit-Rules.html)
# "$@" and "$<" are so called automatic variables (see https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html)
%.o : %.c
	gcc -c ${CFLAGS} -o $@ $<


# Rules can not only be used for compiling a program but also for executing a program
    
matrixmult_par_run: ${BINARY1}
	./${BINARY1}
    
matrixmult_ser_run: ${BINARY2}
	./${BINARY2}

# Delete all build artifacts
clean :
	rm -rf ${BINARY1} ${BINARY2} ${OBJS1} ${OBJS2}


# all  and clean are a "phony" targets, meaning they are no files
.PHONY : all clean
